#+TITLE:       Transport for London with Emacs org-mode
#+AUTHOR:      David Zuber
#+EMAIL:       zuber.david@gmx.de
#+DATE:        2016-04-24 So
#+URI:         /blog/%y/%m/%d/transport-for-london-with-emacs-org-mode
#+KEYWORDS:    Emacs, org-mode, tfl, London, emacs-lisp, svg
#+TAGS:        :Emacs:org-mode:tfl:London:emacs-lisp:svg:
#+LANGUAGE:    en
#+OPTIONS:     H:6 num:nil toc:nil \n:nil ::t |:t ^:nil -:nil f:t *:t <:t
#+DESCRIPTION: A Transport for London app for Emacs

Here is how I integrated the Transport for London API in Emacs. Enjoy!

* Motivation

I've moved to London in February. Some would say it's not London, it's Greater London.
The commute is about 50 minutes to work including walking.
Back in Stuttgart my trains would only run every half an hour so I had to plan every journey
to minimise my layover. I was afraid it would be the same in London,
and since I don't know the tube that well, I decided to plan in advance.

The [[https://tfl.gov.uk/][Transport for London website]] is already very nice. But I have a regular schedule
and I don't want to type in the same input each day just to check my trains.
Also =org-mode= became more and more part of my daily workflow.
The agenda view is awesome and I wanted my commute to show up there.

At that time I was very new to lisp/emacs-lisp. It sometime took me 20 minutes to find out how
to manipulate some of the data structures. But in the end I learned a lot and now I can't stop
writing silly Emacs packages.

* Transport for London API

That was actually a big surprise. The [[https://api-portal.tfl.gov.uk][API]] is simply awesome!
Yes, you can plan journeys. But there is actually much more.
344 traffic cams are available, live! You can get a [[http://www.tfl.gov.uk/tfl/livetravelnews/trafficcams/cctv/jamcams-camera-list.xml][xml file]] with all of them listed.

#+BEGIN_EXAMPLE nxml
  <syndicatedFeed>
    <header>
      <identifier>TfL Traffic Cameras</identifier>
      <version>0.1</version>
      <publishDateTime>2016-04-24T11:18:11Z</publishDateTime>
      <author>digital@tfl.gov.uk</author>
      <owner>Transport for London</owner>
      <refreshRate>1</refreshRate>
      <max_Latency>10</max_Latency>
      <timeToError>10</timeToError>
      <overrideMessage/>
      <errorMessage/>
      <feedInfo/>
      <logo>http://www.tfl.gov.uk/tfl-global/images/roundel.gif</logo>
    </header>
    <cameraList updated="1461493091">
      <rooturl>/tfl/livetravelnews/trafficcams/cctv/</rooturl>
      <camera id="00001.01251" available="true">
        <corridor>-</corridor>
        <location>Old Street e of Vince St</location>
        <currentView>Test</currentView>
        <file>00001.01251.jpg</file>
        <captureTime>2016-04-24T10:15:21Z</captureTime>
        <easting>532787</easting>
        <northing>182600</northing>
        <lat>51.5262</lat>
        <lng>-0.08563</lng>
        <osgr>TQ328826</osgr>
        <postCode/>
      </camera>
    </cameraList>
  </syndicatedFeed>
#+END_EXAMPLE

Combining the =rooturl= with a =file= from the =camera= will get you a link like:

#+BEGIN_EXAMPLE
https://tfl.gov.uk/tfl/livetravelnews/trafficcams/cctv/00001.01251.jpg
#+END_EXAMPLE

Enter it in your browser to receive the latest image from that traffic camera.

There is a nice interactive [[https://api.tfl.gov.uk/][API explorer site]]. What I needed was the [[https://api.tfl.gov.uk/#Journey][journey planner API]].
There are a lot of parameters but what you essentially need is something like this:

#+BEGIN_EXAMPLE
https://api.tfl.gov.uk/Journey/JourneyResults/Bank/to/Westminster
#+END_EXAMPLE

This will try to retrieve a journey from Bank to Westminster.
The problem is that TfL knows way more than one Bank or Westminster station.
It will return a response with something like a 301 status code and a disambiguation result:
For each location type (to, from, via) there is a list with possible candidates.
The user has to select one of each and then you send a new request with the more precise
information.

#+BEGIN_EXAMPLE json
{
    "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.DisambiguationResult, Tfl.Api.Presentation.Entities",
    "toLocationDisambiguation": {
        "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.Disambiguation, Tfl.Api.Presentation.Entities",
        "disambiguationOptions": [
            {
                "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.DisambiguationOption, Tfl.Api.Presentation.Entities",
                "parameterValue": "1000266",
                "uri": "\/journey\/journeyresults\/bank\/to\/1000266",
                "place": {
                    "$type": "Tfl.Api.Presentation.Entities.StopPoint, Tfl.Api.Presentation.Entities",
                    "naptanId": "HUBWSM",
                    "modes": [
                        "tube"
                    ],
                    "icsCode": "1000266",
                    "stopType": "stop",
                    "url": "https:\/\/api-neon.tfl.gov.uk\/StopPoint\/HUBWSM",
                    "commonName": "Westminster (London), Westminster",
                    "placeType": "StopPoint",
                    "additionalProperties": [],
                    "lat": 51.50139978595,
                    "lon": -0.12490128591
                },
                "matchQuality": 1000
            },
            {
                "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.DisambiguationOption, Tfl.Api.Presentation.Entities",
                "parameterValue": "1002085",
                "uri": "\/journey\/journeyresults\/bank\/to\/1002085",
                "place": {
                    "$type": "Tfl.Api.Presentation.Entities.StopPoint, Tfl.Api.Presentation.Entities",
                    "naptanId": "930GWMR",
                    "modes": [
                        "river-bus"
                    ],
                    "icsCode": "1002085",
                    "stopType": "stop",
                    "url": "https:\/\/api-neon.tfl.gov.uk\/StopPoint\/930GWMR",
                    "commonName": "Westminster (London), Westminster Pier",
                    "placeType": "StopPoint",
                    "additionalProperties": [],
                    "lat": 51.50181087832,
                    "lon": -0.12361646769000001
                },
                "matchQuality": 967
                }
        ],
        "matchStatus": "list"
    },
    "fromLocationDisambiguation": {
        "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.Disambiguation, Tfl.Api.Presentation.Entities",
        "disambiguationOptions": [
            {
                "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.DisambiguationOption, Tfl.Api.Presentation.Entities",
                "parameterValue": "1000013",
                "uri": "\/journey\/journeyresults\/1000013\/to\/westminster",
                "place": {
                    "$type": "Tfl.Api.Presentation.Entities.StopPoint, Tfl.Api.Presentation.Entities",
                    "naptanId": "HUBBAN",
                    "modes": [
                        "dlr",
                        "tube"
                    ],
                    "icsCode": "1000013",
                    "stopType": "stop",
                    "url": "https:\/\/api-neon.tfl.gov.uk\/StopPoint\/HUBBAN",
                    "commonName": "City of London, Bank",
                    "placeType": "StopPoint",
                    "additionalProperties": [],
                    "lat": 51.513389043480004,
                    "lon": -0.08882541444
                },
                "matchQuality": 1000
            },
            {
                "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.DisambiguationOption, Tfl.Api.Presentation.Entities",
                "parameterValue": "51.66151925957,-0.09419500928",
                "uri": "\/journey\/journeyresults\/51.66151925957,-0.09419500928\/to\/westminster",
                "place": {
                    "$type": "Tfl.Api.Presentation.Entities.Place, Tfl.Api.Presentation.Entities",
                    "url": "https:\/\/api-neon.tfl.gov.uk\/Place\/",
                    "commonName": "Bankside, Enfield (London)",
                    "placeType": "StopPoint",
                    "additionalProperties": [],
                    "lat": 51.66151925957,
                    "lon": -0.09419500927999999
                },
                "matchQuality": 964
            }
       ],
        "matchStatus": "list"
    },
    "viaLocationDisambiguation": {
        "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.Disambiguation, Tfl.Api.Presentation.Entities",
        "matchStatus": "empty"
    },
    "recommendedMaxAgeMinutes": 1440,
    "searchCriteria": {
        "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.SearchCriteria, Tfl.Api.Presentation.Entities",
        "dateTime": "2016-04-24T11:32:00",
        "dateTimeType": "Departing"
    },
    "journeyVector": {
        "$type": "Tfl.Api.Presentation.Entities.JourneyPlanner.JourneyVector, Tfl.Api.Presentation.Entities",
        "from": "Bank",
        "to": "Westminster",
        "via": "",
        "uri": "\/journey\/journeyresults\/bank\/to\/westminster"
    }
}
#+END_EXAMPLE

The issue is, that for stops you would need to send the =icsCode= and for others the latitude and longitude data.
I discovered that you can always take the latitude and longitude data for an unambiguous result.
The only issue is, that the journey will always include a 10m - 50m walk at the beginning and end.

